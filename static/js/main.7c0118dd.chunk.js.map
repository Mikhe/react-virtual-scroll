{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["VirtualScroll","items","itemCount","containerHeight","rowHeight","useState","scrollTop","setScrollTop","ref","useRef","onScroll","e","requestAnimationFrame","useEffect","scrollContainer","useScrollAware","innerHeight","setInnerHeight","totalContentHeight","setTotalContentHeight","innerRef","visibleNodesCount","Math","startNode","Number","offsetY","visibleChildren","Array","index","offsetHeight","style","height","overflow","transform","lowHeightItems","fill","map","_","i","key","hugeItems","App","setItems","width","margin","minWidth","length","onClick","ReactDOM","render","document","getElementById"],"mappings":"oNAuBaA,EAAgB,SAAC,GAKxB,IAJJC,EAII,EAJJA,MACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,UACI,EA1BiB,WAAM,MACOC,mBADP,GACpBC,EADoB,KACTC,EADS,KAErBC,EAAMC,iBAAZ,MACMC,EAAW,SAACC,GAAD,OACfC,uBAAsB,WACpBL,EAAaI,SAAbJ,eAaJ,OAVAM,qBAAU,WACR,IAAMC,EAAkBN,EAAxB,QAEA,KAGE,OAFAD,EAAaO,EAAbP,WACAO,+BACO,kBAAMA,+BAAN,MANXD,IAUO,CAACP,EAAR,GASyBS,GAAlBT,EADH,KACcE,EADd,OAEkCH,mBAFlC,GAEGW,EAFH,KAEgBC,EAFhB,OAGgDZ,mBAClDH,EAJE,GAGGgB,EAHH,KAGuBC,EAHvB,KAMEC,EAAWX,iBAAjB,MACMY,EAAoBC,UAAUnB,EAApC,GACMoB,EAAYD,SAChBA,WAAYA,WAAWE,UADPF,IAEhBpB,EAFF,GAIMuB,EAAUF,EAAhB,EACMG,EAAkBC,MAAA,iBAEjB,qBAAc1B,EAAM2B,EAApB,MAgBP,OAdAf,qBAAU,WACR,GAAIO,GAAYA,EAAZA,SAAgCA,UAApC,aAAmE,KACzDS,EAAiBT,EADwC,qBAG7DS,GAAgBA,IAApB,IACEZ,KAEA,IAAID,GACFG,EAAsBD,IAAtBC,OAIL,CAACH,EAAaE,EAZjBL,IAeE,yBAAKiB,MAAO,CAAEC,OAAF,EAA2BC,SAAU,QAAUxB,IAAKA,GAC9D,yBAAKsB,MAAO,CAAEC,OAAF,EAA8BC,SAAU,WAClD,yBAAKF,MAAO,CAAEG,UAAW,cAAF,SAAgCzB,IAAKY,GAHlE,MCvDIc,EAAiBP,MAAM,KAAMQ,MAAK,GAAMC,KAAI,SAACC,EAAGC,GAAJ,OAChD,yBAAKC,IAAKD,EAAGR,MAAO,CAAEC,OAAQ,SAA9B,mBAAqDO,OAGjDE,EAAYb,MAAM,KAAMQ,MAAK,GAAMC,KAAI,SAACC,EAAGC,GAAJ,OAC3C,yBAAKC,IAAKD,EAAGR,MAAO,CAAEC,OAAQ,UAA9B,mBAAsDO,OA0BzCG,EAvBH,WAAO,IAAD,EACUpC,mBAAS6B,GADnB,mBACTjC,EADS,KACFyC,EADE,KAMhB,OAAO,oCACH,6BAASZ,MAAO,CAAEa,MAAO,MAAOC,OAAQ,SAAUC,SAAU,UAC1D,iCAEE,gCACE,kEAGF,kBAAC,EAAD,CAAe5C,MAAOA,EAAOC,UAAWD,EAAM6C,OAAQ1C,UAAW,GAAID,gBAAiB,MAEtF,4BAAQ4C,QAdI,WAClBL,EAASF,KAaH,mBCtBVQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7c0118dd.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\n\nconst useScrollAware = () => {\n  const [scrollTop, setScrollTop] = useState(0)\n  const ref = useRef(null)\n  const onScroll = (e) =>\n    requestAnimationFrame(() => {\n      setScrollTop(e.target.scrollTop)\n    })\n\n  useEffect(() => {\n    const scrollContainer = ref.current\n\n    if (scrollContainer) {\n      setScrollTop(scrollContainer.scrollTop)\n      scrollContainer.addEventListener('scroll', onScroll)\n      return () => scrollContainer.removeEventListener('scroll', onScroll)\n    }\n  }, [])\n\n  return [scrollTop, ref]\n}\n\nexport const VirtualScroll = ({\n  items,\n  itemCount,\n  containerHeight,\n  rowHeight\n}) => {\n  const [scrollTop, ref] = useScrollAware()\n  const [innerHeight, setInnerHeight] = useState(0)\n  const [totalContentHeight, setTotalContentHeight] = useState(\n    itemCount * rowHeight\n  )\n  const innerRef = useRef(null)\n  const visibleNodesCount = Math.ceil(containerHeight / rowHeight)\n  const startNode = Math.min(\n    Math.max(0, Math.floor(Number(scrollTop) / rowHeight)),\n    itemCount - visibleNodesCount\n  )\n  const offsetY = startNode * rowHeight\n  const visibleChildren = Array(visibleNodesCount)\n    .fill(true)\n    .map((_, index) => items[index + startNode])\n\n  useEffect(() => {\n    if (innerRef && innerRef.current && innerRef.current.offsetHeight) {\n      const { offsetHeight } = innerRef.current\n\n      if (offsetHeight && offsetHeight !== innerHeight) {\n        setInnerHeight(offsetHeight)\n\n        if (innerHeight !== 0) {\n          setTotalContentHeight(totalContentHeight + offsetHeight - innerHeight)\n        }\n      }\n    }\n  }, [innerHeight, totalContentHeight, visibleChildren])\n\n  return (\n    <div style={{ height: containerHeight, overflow: 'auto' }} ref={ref}>\n      <div style={{ height: totalContentHeight, overflow: 'hidden' }}>\n        <div style={{ transform: `translateY(${offsetY}px)` }} ref={innerRef}>\n          {visibleChildren}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { VirtualScroll } from 'react-virtual-scroll-auto'\n\nconst lowHeightItems = Array(1000).fill(true).map((_, i) => (\n  <div key={i} style={{ height: '50px' }}>{`Element #${i}`}</div>\n))\n\nconst hugeItems = Array(1000).fill(true).map((_, i) => (\n  <div key={i} style={{ height: '100px' }}>{`Element #${i}`}</div>\n))\n\nconst App = () => {\n  const [items, setItems] = useState(lowHeightItems);\n  const handleClick = () => {\n    setItems(hugeItems);\n  }\n\n  return <>\n      <section style={{ width: '50%', margin: '0 auto', minWidth: '300px' }}>\n        <article>\n\n          <header>\n            <h2>Push button to change rows height</h2>\n          </header>\n\n          <VirtualScroll items={items} itemCount={items.length} rowHeight={50} containerHeight={200} />\n\n          <button onClick={handleClick}>Expand rows</button>\n\n        </article>\n      </section>\n  </>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}